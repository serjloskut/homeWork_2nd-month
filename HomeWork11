using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;

namespace HomeWork1
{
    class Program
    {
        static void Main(string[] args)
        {
            Shop shop = new Shop(25);
            shop.Work();
        }
    }

    class Shop
    {
        private Queue<Client> _clients = new Queue<Client>();
        private int _balance=0;
        private Random _random = new Random();

        public Shop(int clientsCount)
        {
            CreateQueue(clientsCount);
        }

        public void CreateQueue(int clientCount)
        {
            for (int i = 0; i < clientCount; i++)
            {
                CreateNewClient();
            }
        }

        public void CreateNewClient()
        {
            _clients.Enqueue(new Client(_random));
        }

        public void Work()
        {
            Random random = new Random();

            while (_clients.Count>0)
            {
                Console.WriteLine($"Выручка магазина составляет: {_balance} рублей.\nВ очереди {_clients.Count} человек\nНажмите любую клавишу, чтобы обслужить следующего покупателя...");
                Console.ReadKey();
                Client client = _clients.Dequeue();
                int purchaseAmount = client.CalculatePurchaseAmount();
                Console.WriteLine($"\nКлиент хочет купить продуктов на сумму {purchaseAmount} рублей. Ждем, пока покупатель посчитает деньги...");
                System.Threading.Thread.Sleep(random.Next(1,3)*1000);

                if (client.CheckSolvency())
                {
                    Console.WriteLine("Клиент сделал покупку.");
                    _balance += purchaseAmount;
                }
                else
                {
                    Console.WriteLine($"У клиента не хватило денег для оплаты. Он убрал из корзины {client.RemoveProductFromBasket(random)} товара. Цена покупки составила {client.CalculatePurchaseAmount()} рублей.\n Нажмите любую клавишу для продолжения...");
                    _balance += client.CalculatePurchaseAmount();
                }

                Console.ReadKey();
                Console.Clear();
            }
        }
    }

    class Client
    {
        private int _money;
        private List<Product> _basket = new List<Product>();

        public Client(Random random)
        {
            _money = random.Next(150, 250);
            CreateBasket(random);
        }

        public void CreateBasket(Random random)
        {
            int productCount = random.Next(3, 10);

            for (int i = 0; i < productCount; i++)
            {
                _basket.Add(new Product(random));
            }
        }

        public int RemoveProductFromBasket(Random random)
        {
            int productCount = 0;

            while (_money<CalculatePurchaseAmount())
            {
                _basket.RemoveAt(random.Next(0, _basket.Count-1));
                productCount++;
            }

            return productCount;
        }

        public bool CheckSolvency()
        {
            return _money >= CalculatePurchaseAmount();
        }

        public int CalculatePurchaseAmount()
        {
            int purchaseAmount = 0;

            for (int i = 0; i < _basket.Count; i++)
            {
                purchaseAmount += _basket[i].Price;
            }

            return purchaseAmount;
        }
    }

    class Product
    {
        private string _nameOfProduct;

        public int Price { get; private set; }

        public Product(Random random)
        {
            Price = random.Next(10, 50);
            _nameOfProduct = GenerateName(random);
        }

        private string GenerateName(Random rand)
        {
            string name=string.Empty;

            switch (rand.Next(1, 10))
            {
                case 1:
                    name = "Огурец";
                    break;
                case 2:
                    name = "Помидор";
                    break;
                case 3:
                    name = "Виноград";
                    break;
                case 4:
                    name = "Сыр";
                    break;
                case 5:
                    name = "Свинина";
                    break;
                case 6:
                    name = "Котлеты";
                    break;
                case 7:
                    name = "Мороженое";
                    break;
                case 8:
                    name = "Виски";
                    break;
                case 9:
                    name = "Кока-кола";
                    break;
                case 10:
                    name = "Тик-так";
                    break;
            }

            return name;
        }
    }
}
