using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;

namespace HomeWork1
{
    class Program
    {
        static void Main(string[] args)
        {
            Warrior[] warriors =
            {
                new FigtherClanHead(100, 30, 40),
                new FigtherClanBoxer(90, 30, 30),
                new FigtherClanShoulder(200, 20, 15),
                new FigtherClanHead(150, 20, 40),
                new FigtherClanBoxer(150, 150, 30)
            };

            Console.WriteLine("Доступные бойцы:");
            for (int i = 0; i < warriors.Length; i++)
            {
                Console.Write($"{i + 1} - ");
                warriors[i].PrintStats();
            }

            Console.Write("Выберите первого игрока: ");
            Warrior figterOne = warriors[Convert.ToInt32(Console.ReadLine()) - 1];

            Console.Write("Выберите Второго игрока: ");
            Warrior figterTwo = warriors[Convert.ToInt32(Console.ReadLine()) - 1];

            while (figterOne.GetHealth()>0 && figterTwo.GetHealth()>0)
            {
                figterOne.TakeDamage(figterTwo.GetDamage());
                figterOne.UseSpecialSkill();
                figterTwo.TakeDamage(figterOne.GetDamage());
                figterTwo.UseSpecialSkill();

                figterOne.PrintStats();
                figterTwo.PrintStats();
                Console.WriteLine();
            }

            if (figterOne.GetHealth() <= 0 && figterTwo.GetHealth() <= 0)
                Console.WriteLine("Бой закончился ничьей!");
            else if(figterOne.GetHealth()<=0)
                Console.WriteLine("Победил второй игрок!");
            else if(figterTwo.GetHealth() <= 0)
                Console.WriteLine("Победил первый игрок!");

            Console.ReadKey();
        }
    }

    class Warrior
    {
        protected int Health;
        protected int Armor;
        protected int Damage;

        protected string TypeClan;

        public Warrior(int health, int armor, int damage)
        {
            Health = health;
            Armor = armor;
            Damage = damage;
        }

        public int GetHealth()
        {
            return Health;
        }

        public int GetDamage()
        {
            return Damage;
        }

        public void TakeDamage(int damage)
        {
            if (Armor <= damage)
                Health -= (damage - Armor);
        }

        public void PrintStats()
        {
            Console.WriteLine($"Healh - {Health}; Armor - {Armor}; Damage - {Damage}");
        }

        public string GetTypeClan()
        {
            return TypeClan;
        }

        public virtual void UseSpecialSkill()
        {
            
        }
    }

    class FigtherClanHead : Warrior
    {
        public FigtherClanHead(int health, int armor, int damage) : base(health, armor, damage)
        {
            TypeClan = "Боец клана \"Головастых\"";
        }

        public override void UseSpecialSkill()
        {
            Health += 1;
        }
    }

    class FigtherClanShoulder : Warrior
    {
        public FigtherClanShoulder(int health, int armor, int damage) : base(health, armor, damage)
        {
            TypeClan = "Боец клана \"Волосатых\"";
        }

        public override void UseSpecialSkill()
        {
            Health += 20;
            Armor -= 5;
        }
    }

    class FigtherClanBoxer : Warrior
    {
        public FigtherClanBoxer(int health, int armor, int damage) : base(health, armor, damage)
        {
            TypeClan = "Боец клана \"Боксеры\"";
        }

        public override void UseSpecialSkill()
        {
            Random random = new Random();

            Damage += (Damage / random.Next(5,15));
        }
    }
}
