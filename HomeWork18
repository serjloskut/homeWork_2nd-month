using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;

namespace HomeWork1
{
    class Program
    {
        static void Main(string[] args)
        {
            int countPatient = 20;

            Hospital hospital = new Hospital(countPatient);
            hospital.Work();
        }
    }

    class Hospital
    {
        private List<Patient> _patients;

        public Hospital(int countPatient)
        {
            _patients = new List<Patient>();
            Random random = new Random();


            for (int i = 0; i < countPatient; i++)
            {
                _patients.Add(new Patient
                    (
                    (Surname)random.Next(0, Enum.GetValues(typeof(Surname)).Length), 
                    (Name)random.Next(0, Enum.GetValues(typeof(Name)).Length), 
                    (Patronymic)random.Next(0, Enum.GetValues(typeof(Patronymic)).Length), 
                    random, 
                    (Disease)random.Next(0, Enum.GetValues(typeof(Disease)).Length))
                    );
            }
        }

        public void Work()
        {
            bool isWork = true;

            while (isWork)
            {
                Console.Write("Доступные команды для выполнения:\n" +
                    "0. Вывести список всех больных\n" +
                    "1. Отсортировать всех больных по фио\n" +
                    "2. Отсортировать всех больных по возрасту.\n" +
                    "3. Вывести больных с определенным заболеванием.\n" +
                    "4. Выход из программы.\n\n" +
                    "Введите номер команды: ");

                switch (Console.ReadLine())
                {
                    case "0":
                        ShowInfo(_patients);
                        PrintPressAnyKey();
                        break;
                    case "1":
                        SortByFullName();
                        PrintPressAnyKey();
                        break;
                    case "2":
                        SortByAge();
                        PrintPressAnyKey();
                        break;
                    case "3":
                        FilterDyDisease();
                        PrintPressAnyKey();
                        break;
                    case "4":
                        isWork = false;
                        break;
                    default:
                        Console.WriteLine("Вы ввели неверную команду. Попробуйте еще раз. Нажмите любую клавишу для продолжения...");
                        Console.ReadKey();
                        break;
                }

                Console.Clear();
            }
        }

        private void ShowInfo(IEnumerable<Patient> patients)
        {
            foreach (var patient in patients)
            {
                patient.ShowInfo();
            }
        }

        private void SortByFullName()
        {
            var sortedPatients = from patient in _patients
                                 orderby patient.FullName
                                 select patient;

            ShowInfo(sortedPatients);
        }

        private void PrintPressAnyKey()
        {
            Console.WriteLine("\nНажмите любую клавишу для продолжения...");
            Console.ReadKey();
        }

        private void SortByAge()
        {
            var sortedPatients = from patient in _patients
                                 orderby patient.Age
                                 select patient;

            ShowInfo(sortedPatients);
        }

        private void FilterDyDisease()
        {
            Console.Write("Введите название болезни ");

            var arrayDisease = Enum.GetValues(typeof(Disease));

            foreach (var disease in arrayDisease)
            {
                Console.Write($"{disease}/");
            }

            Console.Write(": ");

            string userDisease = Console.ReadLine();

            var filteredPatients = from patient in _patients
                                   where patient.Disease.ToLower() == userDisease.ToLower()
                                   select patient;

            ShowInfo(filteredPatients);
        }
    }

    class Patient
    {
        public string FullName { get; private set; }
        public int Age { get; private set; }
        public string Disease { get; private set; }

        public Patient(Surname surname, Name name, Patronymic patronymic, Random randomAge, Disease disease)
        {
            FullName = surname + " " + name + " " + patronymic;
            Age = randomAge.Next(20, 50);
            Disease = disease.ToString();
        }

        public void ShowInfo()
        {
            Console.WriteLine($"{FullName} - {Disease}. Возрас: {Age}");
        }
    }

    enum Disease
    {
        Пневмония,
        Оспа,
        ОРВИ,
        ОРЗ,
        Коронавирус
    }

    enum Surname
    {
        Иванов,
        Петров,
        Сидоров,
        Кошкин,
        Комаров
    }

    enum Name
    {
        Сергей,
        Алексей,
        Иван,
        Петр,
        Валентин
    }

    enum Patronymic
    {
        Олегович,
        Анатольевич,
        Петрович,
        Иванович,
        Сидорович
    }
}
